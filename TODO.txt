# TODO: Setup Your Enhanced Automated Blog Empire

This guide has been updated for the enhanced system. It now includes automated keyword discovery and social media posting. It still requires NO credit cards and uses only easy-to-join programs.

---
## Step 1: Prepare Your Environment & Content Engine
---

### 1.1: Install Python and Packages
   - Open your terminal and use a virtual environment:
     ```
     python -m venv venv
     .\\venv\\Scripts\\activate  (On Windows)
     ```
   - Install all necessary packages, including the new ones for Reddit (`praw`) and web scraping (`lxml`):
     ```
     pip install -r requirements.txt
     ```

### 1.2: Set Up Your Free, Local Content Engine (Ollama)
   - The system uses Ollama to generate content for free.
     1. **Install Ollama:** Download from [https://ollama.com/](https://ollama.com/).
     2. **Download a Model:** In your terminal, run `ollama pull llama3:8b`.
     3. **Keep it Running:** Leave the Ollama application running in the background.

---
## Step 2: Configure APIs and Services
---

### 2.1: Set Up a Free Web Host (No Card Needed)
   - Go to **InfinityFree** ([https://www.infinityfree.com/](https://www.infinityfree.com/)) and sign up.
   - They will provide a free domain and FTP credentials.
   - **Action:** Open `config.json` and fill in the `site_url` and `ftp` sections.

### 2.2: Set Up Reddit for Automated Social Marketing
   - This allows the script to post your new articles to Reddit for instant traffic.
   1. **Create a Reddit Account:** If you don't have one, create a dedicated account for your bot.
   2. **Create a Reddit App:**
      - Go to: [https://www.reddit.com/prefs/apps](https://www.reddit.com/prefs/apps)
      - Click "are you a developer? create an app..."
      - Name it (e.g., `MyBlogPoster`), select **"script"** for the type.
      - For "redirect uri", put `http://localhost:8080`.
      - Click "create app".
   3. **Get Your Credentials:**
      - You will now see your app's **client ID** (a string of letters/numbers under the name) and the **client secret**.
   4. **Action:** Open `config.json`. In the `social_posting.reddit` section, fill in the `client_id`, `client_secret`, your bot's `username` and `password`, and the `subreddit` you want to post to (e.g., `blogging`).
   - **IMPORTANT:** Do not spam. Only post to subreddits that are relevant and where you have permission. Posting too much can get your account banned.

### 2.3: Build Your "Curated Product Portfolio"
   - **This is the most important configuration step.** Instead of relying on a fragile scraper, you will act as the curator for your empire.
   - Your task is to find 3-5 high-quality products from an affiliate network like ClickBank and add them to your portfolio in `config.json`. The script will then randomly pick from your list for each new post.

   - **Action: Curate Your Products**
     1. **Go to:** [https://www.clickbank.com/](https://www.clickbank.com/) and log in.
     2. **Go to the Affiliate Marketplace.** Browse categories you are interested in (e.g., "Health & Fitness", "E-business & E-marketing").
     3. **Find a good product.** Look for products with a high "Gravity" score, as this indicates other affiliates are making sales.
     4. **For each product you choose:**
        - Click **"Promote"** to generate your unique affiliate link. **Copy this link.**
        - Copy the **product title** and **description** from the marketplace listing.
     5. **Open `config.json`** and go to the `product_portfolio` section.
     6. **Fill it out.** Replace the examples with your real product information. It should look like this:
        ```json
        "product_portfolio": [
          {
            "title": "The Actual Product Title You Copied",
            "description": "The actual product description you copied.",
            "link": "your-unique-affiliate-hoplink-you-copied"
          },
          {
            "title": "Another Great Product Title",
            "description": "The description for your second chosen product.",
            "link": "your-second-unique-affiliate-link"
          }
        ]
        ```

   - **How it Works Now:**
     - The script will randomly select one of the products from your portfolio.
     - It will automatically generate a unique blog post for that product.
     - It will automatically insert your unique affiliate link into the post.

### 2.4: Configure Your Bot's Posting Speed ("Smart Throttling")
   - The system no longer posts just once a day. It runs in a continuous loop and uses "Smart Throttling" to decide when to post. You can control the pace with these settings in `config.json`:
   - **`min_delay_between_posts_minutes`**: The minimum time to wait between posts. Default is `240` (4 hours).
   - **`max_posts_per_24_hours`**: The absolute maximum number of posts in a rolling 24-hour period. Default is `4`.
   - **Action:** You can leave the defaults, but if you want the bot to be more or less aggressive, you can change these numbers.

### 2.5: Final Sanity Check
   - Before you run the script, do one last check of `config.json` to make sure you have replaced all the placeholder values.
   - **Checklist:**
     - `site_url`: Is it set to your InfinityFree domain?
     - `ftp`: Are the `host`, `user`, and `pass` all filled in?
     - `reddit`: Are `client_id`, `client_secret`, `username`, and `password` filled in? (Even if disabled).
     - `product_portfolio`: Have you added your real affiliate products?

---
## Step 3: Deploy & Run the System (The Pro Way with Git)
---

### 3.1: Set Up Your Git Repository
   1. **Create a GitHub Account:** If you don't have one, sign up at [https://github.com/](https://github.com/).
   2. **Create a New Repository:** 
      - Click the "+" icon in the top right and select "New repository".
      - Give it a name (e.g., `money-script`).
      - **IMPORTANT:** Make it a **Private** repository. This is crucial because your `config.json` contains passwords.
      - Do NOT initialize with a README or .gitignore (we've already created one).
   3. **Push Your Code to GitHub:**
      - Open your terminal in the project directory (`C:\\Users\\carte\\Downloads\\Money Script`).
      - Run these commands one by one, replacing the URL with your new repository's URL:
      ```
      git init
      git add .
      git commit -m "Initial project setup"
      git branch -M main
      git remote add origin https://github.com/YourUsername/your-repo-name.git
      git push -u origin main
      ```

### 3.2: Deploy on the Server (PythonAnywhere)
   1. **Sign Up:** Create a free "Beginner" account at [https://www.pythonanywhere.com/](https://www.pythonanywhere.com/).
   2. **Open a Bash Console:** From your PythonAnywhere dashboard, go to the "Consoles" tab and start a new "Bash" console.
   3. **Clone Your Repository:**
      - In the Bash console, run this command (use your private repo URL):
      ```bash
      git clone https://github.com/YourUsername/your-repo-name.git
      ```
      - It will ask for your GitHub username and password. For the password, you must use a **Personal Access Token**.
      - **How to get a token:** Go to GitHub Settings -> Developer settings -> Personal access tokens -> Generate new token. Give it "repo" permissions. Copy the token and paste it as your password in the console.
   4. **Set Up the Virtual Environment:**
      - In the PythonAnywhere console, run these commands:
      ```bash
      # Go into your new project directory
      cd your-repo-name/ 
      
      # Create a virtual environment for this project
      python3 -m venv venv 
      
      # Activate it
      source venv/bin/activate 
      
      # Install all required packages
      pip install -r requirements.txt 
      ```
   5. **Set Up the Task:**
      - Go to the "Tasks" tab on PythonAnywhere and create a new scheduled task.
      - **Set the schedule to run every 10 minutes.** The script's internal logic will handle when to actually post.
      - **Enter this command,** replacing `YourUsername` and `your-repo-name` with your details:
      ```bash
      /home/YourUsername/your-repo-name/venv/bin/python /home/YourUsername/your-repo-name/runner.py
      ```
   6. **Save and Done:** Create the task. The system is now fully automated and deployed professionally. To update your code in the future, just `git push` from your computer and then run `git pull` in your PythonAnywhere console.

Your enhanced, self-managing blog empire is now live. 