# TODO: Setup Your Automated Blog Empire on PythonAnywhere

This guide has been completely updated for the new, simplified architecture that runs entirely on PythonAnywhere, using a powerful cloud AI.

---
## Step 1: Prepare Your Code and Accounts
---

### 1.1: Get Your Free Groq AI API Key
   - The system now uses a fast, free cloud AI called Groq to generate content.
     1. **Sign Up:** Go to [https://console.groq.com/](https://console.groq.com/) and create a free account.
     2. **Create an API Key:** Go to the "API Keys" section and create a new key.
     3. **Copy the Key:** Copy the key it gives you. You will need it in the next step.

### 1.2: Configure Your Project
   - Open the `config.json` file in your project.
   1.  **Set your `site_url`**: Change `"http://YourUsername.pythonanywhere.com"` to the URL your web app will have (e.g., `"http://carter75.pythonanywhere.com"`).
   2.  **Set your `web_app_path`**: This tells the script where to save your website files on the PythonAnywhere server. **This path is very specific.** It must be `/home/YourUsername/your-repo-name/webapp/`. For example: `/home/carter75/blog/webapp/`.
   3.  **Paste your `api_key`**: In the `groq_settings`, replace the placeholder with the API key you copied from Groq.
   4.  **Fill out your `product_portfolio`** with your real affiliate links.

### 1.3: Push Your Code to a Private GitHub Repository
   - If you haven't already, follow these steps locally to upload your project. This is crucial for easy deployment.
   1. **Create a Private Repo:** Go to [https://github.com/](https://github.com/) and create a new **Private** repository.
   2. **Push Your Code:** In your local terminal, run these commands:
      ```
      git init
      git add .
      git commit -m "Initial project setup"
      git remote add origin https://github.com/YourUsername/your-repo-name.git
      git push -u origin main
      ```

---
## Step 2: Deploy and Run on PythonAnywhere
---

### 2.1: Clone Your Repository on the Server
   1. **Open a Bash Console:** On your PythonAnywhere dashboard, open a new "Bash" console.
   2. **Clone Your Repo:** Run `git clone https://github.com/YourUsername/your-repo-name.git`. It will ask for your GitHub username and a password. For the password, you must use a **Personal Access Token** from GitHub's developer settings.

### 2.2: Set Up the Virtual Environment
   - In the same Bash console, run these commands:
     ```bash
     cd your-repo-name/
     python3 -m venv venv
     source venv/bin/activate
     pip install -r requirements.txt
     ```

### 2.3: Set Up the Web App
   1. Go to the **"Web"** tab on your PythonAnywhere dashboard.
   2. Click **"Add a new web app"**.
   3. Choose the **"Manual configuration"** option.
   4. Choose the **Python version** that matches your virtual environment (e.g., Python 3.10).
   5. On the next screen, scroll down to the **"Static files"** section.
      - For the **URL**, enter `/` (a single forward slash).
      - For the **Directory**, enter the **exact same path** you used for `web_app_path` in your `config.json`. For example: `/home/carter75/blog/webapp`.
   6. **Reload the Web App:** Click the big green "Reload" button at the top of the page. Your site is now live!

### 2.4: Schedule the Runner Task
   1. Go to the **"Tasks"** tab.
   2. Create a new **Scheduled task**.
   3. Set the schedule to run **every 10 minutes.** The script's internal logic will handle the real posting schedule.
   4. **Enter this command,** making sure the paths match your setup:
      ```bash
      /home/YourUsername/your-repo-name/venv/bin/python /home/YourUsername/your-repo-name/runner.py
      ```
   5. **Create the task.**

The system is now fully deployed and automated on PythonAnywhere. To update your code, just `git push` from your computer and `git pull` in the PythonAnywhere console, then reload your web app. 