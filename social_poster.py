from utils import get_config
import logging
import praw
from utils import extract_first_paragraph

def post_to_reddit(config, article_title, article_url, article_html):
    """
    Posts a new article to a specified subreddit as a self-post with a summary.

    Args:
        config (dict): The Reddit configuration dictionary.
        article_title (str): The title of the article.
        article_url (str): The full URL to the live article.
        article_html (str): The full HTML content of the article.
    """
    if not config.get('enabled'):
        logging.info("Reddit posting is disabled in the config.")
        return

    logging.info(f"Preparing to post to subreddit: {config['subreddit']}")

    try:
        reddit = praw.Reddit(
            client_id=config['client_id'],
            client_secret=config['client_secret'],
            user_agent=f"python:blog-poster-script:v1.0 (by /u/{config['username']})",
            username=config['username'],
            password=config['password']
        )
        
        subreddit = reddit.subreddit(config['subreddit'])
        
        # --- Create a more durable self-post body ---
        # The AI-generated summary can be used as a hook.
        summary = extract_first_paragraph(article_html)
        if not summary:
            summary = f"Check out the latest article about {article_title}!"

        # The site_url should be passed into this function or retrieved from config
        # For now, let's assume it's in the main config object passed in.
        site_url = config.get('site_url', 'http://example.com') # Fallback for safety
        if 'YOUR_SITE_URL' in site_url:
            logging.warning("site_url is not configured. Reddit post will have a placeholder link.")


        post_body = (
            f"{summary}\n\n"
            f"**Find this and other great product reviews on my blog:** {site_url}\n\n"
            f"*This post was generated by an automated system.*"
        )
        
        # Use the article title for the post title
        post_title = config.get('post_title_template', "{article_title}").format(article_title=article_title)

        submission = subreddit.submit(title=post_title, selftext=post_body)
        logging.info(f"Successfully posted to Reddit: {submission.shortlink}")

    except Exception as e:
        logging.error(f"Failed to post to Reddit: {e}", exc_info=True)

if __name__ == '__main__':
    # This block is for testing purposes.
    # It requires a valid config.json and a sample article.
    logging.basicConfig(level=logging.INFO)
    test_config = get_config()
    
    # You would need to create a dummy article_html for this test to run.
    sample_html = "<h2>Test Title</h2><p>This is the first paragraph for the test.</p><p>Another paragraph.</p>"
    sample_title = "My Test Post"
    sample_url = "http://example.com/test" # This is no longer the primary link in the post body
    
    if test_config and test_config.get('social_posting', {}).get('reddit', {}).get('enabled'):
        # Pass the whole reddit config which should include the site_url for our new logic
        reddit_config = test_config['social_posting']['reddit']
        # We need to add site_url to the config for the test to work
        reddit_config['site_url'] = test_config.get('site_url')
        
        post_to_reddit(reddit_config, sample_title, sample_url, sample_html)
    else:
        logging.info("Reddit posting is disabled or config is missing. Skipping test.") 